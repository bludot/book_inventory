// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bludot/tempmee/inventory/internal/services/book (interfaces: BookServiceImpl)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock_book_service.go -package=mocks github.com/bludot/tempmee/inventory/internal/services/book BookServiceImpl
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	book "github.com/bludot/tempmee/inventory/internal/db/repositories/book"
	gomock "go.uber.org/mock/gomock"
)

// MockBookServiceImpl is a mock of BookServiceImpl interface.
type MockBookServiceImpl struct {
	ctrl     *gomock.Controller
	recorder *MockBookServiceImplMockRecorder
}

// MockBookServiceImplMockRecorder is the mock recorder for MockBookServiceImpl.
type MockBookServiceImplMockRecorder struct {
	mock *MockBookServiceImpl
}

// NewMockBookServiceImpl creates a new mock instance.
func NewMockBookServiceImpl(ctrl *gomock.Controller) *MockBookServiceImpl {
	mock := &MockBookServiceImpl{ctrl: ctrl}
	mock.recorder = &MockBookServiceImplMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookServiceImpl) EXPECT() *MockBookServiceImplMockRecorder {
	return m.recorder
}

// CreateBook mocks base method.
func (m *MockBookServiceImpl) CreateBook(arg0 context.Context, arg1 book.Book) (*book.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBook", arg0, arg1)
	ret0, _ := ret[0].(*book.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBook indicates an expected call of CreateBook.
func (mr *MockBookServiceImplMockRecorder) CreateBook(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBook", reflect.TypeOf((*MockBookServiceImpl)(nil).CreateBook), arg0, arg1)
}

// FindAllBooks mocks base method.
func (m *MockBookServiceImpl) FindAllBooks(arg0 context.Context) (*[]book.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllBooks", arg0)
	ret0, _ := ret[0].(*[]book.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllBooks indicates an expected call of FindAllBooks.
func (mr *MockBookServiceImplMockRecorder) FindAllBooks(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllBooks", reflect.TypeOf((*MockBookServiceImpl)(nil).FindAllBooks), arg0)
}

// FindBookById mocks base method.
func (m *MockBookServiceImpl) FindBookById(arg0 context.Context, arg1 string) (*book.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBookById", arg0, arg1)
	ret0, _ := ret[0].(*book.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBookById indicates an expected call of FindBookById.
func (mr *MockBookServiceImplMockRecorder) FindBookById(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBookById", reflect.TypeOf((*MockBookServiceImpl)(nil).FindBookById), arg0, arg1)
}

// FindBookByTitle mocks base method.
func (m *MockBookServiceImpl) FindBookByTitle(arg0 context.Context, arg1 string) (*book.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBookByTitle", arg0, arg1)
	ret0, _ := ret[0].(*book.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBookByTitle indicates an expected call of FindBookByTitle.
func (mr *MockBookServiceImplMockRecorder) FindBookByTitle(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBookByTitle", reflect.TypeOf((*MockBookServiceImpl)(nil).FindBookByTitle), arg0, arg1)
}

// FindBooksByAuthor mocks base method.
func (m *MockBookServiceImpl) FindBooksByAuthor(arg0 context.Context, arg1 string) (*[]book.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBooksByAuthor", arg0, arg1)
	ret0, _ := ret[0].(*[]book.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBooksByAuthor indicates an expected call of FindBooksByAuthor.
func (mr *MockBookServiceImplMockRecorder) FindBooksByAuthor(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBooksByAuthor", reflect.TypeOf((*MockBookServiceImpl)(nil).FindBooksByAuthor), arg0, arg1)
}

// FindBooksByIDs mocks base method.
func (m *MockBookServiceImpl) FindBooksByIDs(arg0 context.Context, arg1 []string) (*[]book.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBooksByIDs", arg0, arg1)
	ret0, _ := ret[0].(*[]book.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBooksByIDs indicates an expected call of FindBooksByIDs.
func (mr *MockBookServiceImplMockRecorder) FindBooksByIDs(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBooksByIDs", reflect.TypeOf((*MockBookServiceImpl)(nil).FindBooksByIDs), arg0, arg1)
}
