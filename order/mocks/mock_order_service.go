// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bludot/tempmee/order/internal/services/order (interfaces: OrderServiceImpl)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock_order_service.go -package=mocks github.com/bludot/tempmee/order/internal/services/order OrderServiceImpl
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	order "github.com/bludot/tempmee/order/internal/db/repositories/order"
	gomock "go.uber.org/mock/gomock"
)

// MockOrderServiceImpl is a mock of OrderServiceImpl interface.
type MockOrderServiceImpl struct {
	ctrl     *gomock.Controller
	recorder *MockOrderServiceImplMockRecorder
}

// MockOrderServiceImplMockRecorder is the mock recorder for MockOrderServiceImpl.
type MockOrderServiceImplMockRecorder struct {
	mock *MockOrderServiceImpl
}

// NewMockOrderServiceImpl creates a new mock instance.
func NewMockOrderServiceImpl(ctrl *gomock.Controller) *MockOrderServiceImpl {
	mock := &MockOrderServiceImpl{ctrl: ctrl}
	mock.recorder = &MockOrderServiceImplMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderServiceImpl) EXPECT() *MockOrderServiceImplMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockOrderServiceImpl) CreateOrder(arg0 context.Context, arg1 *order.Order) (*order.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", arg0, arg1)
	ret0, _ := ret[0].(*order.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockOrderServiceImplMockRecorder) CreateOrder(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrderServiceImpl)(nil).CreateOrder), arg0, arg1)
}

// DeleteOrder mocks base method.
func (m *MockOrderServiceImpl) DeleteOrder(arg0 context.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrder", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrder indicates an expected call of DeleteOrder.
func (mr *MockOrderServiceImplMockRecorder) DeleteOrder(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrder", reflect.TypeOf((*MockOrderServiceImpl)(nil).DeleteOrder), arg0, arg1)
}

// FindAllOrders mocks base method.
func (m *MockOrderServiceImpl) FindAllOrders(arg0 context.Context) (*[]order.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllOrders", arg0)
	ret0, _ := ret[0].(*[]order.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllOrders indicates an expected call of FindAllOrders.
func (mr *MockOrderServiceImplMockRecorder) FindAllOrders(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllOrders", reflect.TypeOf((*MockOrderServiceImpl)(nil).FindAllOrders), arg0)
}

// FindOrderById mocks base method.
func (m *MockOrderServiceImpl) FindOrderById(arg0 context.Context, arg1 int) (*order.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrderById", arg0, arg1)
	ret0, _ := ret[0].(*order.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrderById indicates an expected call of FindOrderById.
func (mr *MockOrderServiceImplMockRecorder) FindOrderById(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrderById", reflect.TypeOf((*MockOrderServiceImpl)(nil).FindOrderById), arg0, arg1)
}

// FindOrdersByParentOrderId mocks base method.
func (m *MockOrderServiceImpl) FindOrdersByParentOrderId(arg0 context.Context, arg1 int) (*[]order.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrdersByParentOrderId", arg0, arg1)
	ret0, _ := ret[0].(*[]order.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrdersByParentOrderId indicates an expected call of FindOrdersByParentOrderId.
func (mr *MockOrderServiceImplMockRecorder) FindOrdersByParentOrderId(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrdersByParentOrderId", reflect.TypeOf((*MockOrderServiceImpl)(nil).FindOrdersByParentOrderId), arg0, arg1)
}

// FindOrdersByUserId mocks base method.
func (m *MockOrderServiceImpl) FindOrdersByUserId(arg0 context.Context, arg1 string) (*[]order.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrdersByUserId", arg0, arg1)
	ret0, _ := ret[0].(*[]order.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrdersByUserId indicates an expected call of FindOrdersByUserId.
func (mr *MockOrderServiceImplMockRecorder) FindOrdersByUserId(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrdersByUserId", reflect.TypeOf((*MockOrderServiceImpl)(nil).FindOrdersByUserId), arg0, arg1)
}

// UpdateOrder mocks base method.
func (m *MockOrderServiceImpl) UpdateOrder(arg0 context.Context, arg1 *order.Order) (*order.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", arg0, arg1)
	ret0, _ := ret[0].(*order.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockOrderServiceImplMockRecorder) UpdateOrder(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockOrderServiceImpl)(nil).UpdateOrder), arg0, arg1)
}
